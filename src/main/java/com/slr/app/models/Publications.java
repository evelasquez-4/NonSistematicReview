package com.slr.app.models;
// Generated Jun 22, 2020, 3:24:17 AM by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.search.engine.backend.types.ObjectStructure;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.KeywordField;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Publications generated by hbm2java
 */
@Entity
@Table(name = "publications", schema = "slr")
@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler","fieldHandler"})
public class Publications implements java.io.Serializable {
	
	private static final long serialVersionUID = 1L;

	//@GeneratedValue(strategy=GenerationType.SEQUENCE, generator = "pub_sequence")
	//@SequenceGenerator(name = "pub_sequence", sequenceName = "slr.publications_id_seq", allocationSize = 1 )
	@Id
	@Column(name = "id", unique = true, nullable = false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private long id;

	@Column(name = "abstract",nullable = true)
	@FullTextField(analyzer = "english_analyzer")
	private String abstract_;
	
//	@Field(name="title", index = Index.YES,analyze = Analyze.YES,store = Store.NO)
	@FullTextField(analyzer = "english_analyzer")
	private String title;
	
	@KeywordField(normalizer = "english_normalyzer")
	private String  dblpKey;
		
	@GenericField
	private Integer year;
	
	private String url;
	
	@FullTextField
	private String ee;
	
	private String note;
	
	@KeywordField(normalizer = "english_normalyzer")
	private String crossref;
	
	//register date in dblp
	private Date mdate;
	
	private String updatedState;
	
	private String docType;
	
	@Temporal(TemporalType.DATE)
	@Column(name = "reg_date", length = 13)
	private Date regDate;
	
	@Column(name="rg_info")
	@FullTextField
	private String rgInfo;
	
	@Column(name="proceeding_info")
	private String proceedingInfo;
	
	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	//private Set<BookChapters> bookChapterses = new HashSet<BookChapters>(0);
	@OneToOne(mappedBy = "publications",cascade = CascadeType.PERSIST)
	@Embedded
    @IndexedEmbedded(structure =  ObjectStructure.NESTED)
	private BookChapters bookChapters;
	
	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	//private Set<JournalEditorials> journalEditorialses = new HashSet<JournalEditorials>(0);
	@OneToOne(mappedBy = "publications",cascade = CascadeType.PERSIST)
	@Embedded
	@IndexedEmbedded(structure = ObjectStructure.NESTED)
	private JournalEditorials journalEditorials;
	
	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	//private Set<ConferenceEditorials> conferenceEditorialses = new HashSet<ConferenceEditorials>(0);
	@OneToOne(mappedBy = "publications",cascade = CascadeType.PERSIST)
	@Embedded
	@IndexedEmbedded(structure = ObjectStructure.NESTED)
	private ConferenceEditorials conferenceEditorials;
	
	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	//private Set<ConferencePapers> conferencePaperses = new HashSet<ConferencePapers>(0);
	@OneToOne(mappedBy = "publications",cascade = CascadeType.PERSIST)
	@Embedded
	@IndexedEmbedded(structure = ObjectStructure.NESTED)
	private ConferencePapers conferencePapers;
	
	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	//private Set<Books> bookses = new HashSet<Books>(0);
	@OneToOne(mappedBy = "publications", cascade = CascadeType.PERSIST)
	@Embedded
    @IndexedEmbedded(structure = ObjectStructure.NESTED)
	private Books books;
	
	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	//private Set<JournalPapers> journalPaperses = new HashSet<JournalPapers>(0);
	@OneToOne(mappedBy = "publications",cascade = CascadeType.PERSIST)
	@Embedded
	@IndexedEmbedded(structure = ObjectStructure.NESTED)
	private JournalPapers journalPapers;
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications", cascade = CascadeType.PERSIST)
	private Set<AuthorPublications> authorPublicationses = new HashSet<AuthorPublications>(0);
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "publications")
	private Set<PublicationKeywords> publicationKeywordses = new HashSet<PublicationKeywords>(0);
	
	@Column(name = "api_state")
	private int apiState;
	
	public Publications() {
	}

	public Publications(long id) {
		this.id = id;
	}

	public Publications(long id, String abstract_, String title, String dblpKey, Integer year, String url, String ee,
			String note, String crossref, Date mdate, String updatedState, String docType, Date regDate,
			//Set<BookChapters> bookChapterses, 
			BookChapters bookChapters,
			//Set<JournalEditorials> journalEditorialses,
			JournalEditorials journalEditorials,
			//Set<ConferenceEditorials> conferenceEditorialses,
			ConferenceEditorials conferenceEditorials,
			Set<AuthorPublications> authorPublicationses,
			//Set<ConferencePapers> conferencePaperses,
			ConferencePapers conferencePapers,
			//Set<Books> bookses,
			Books books,
			//Set<JournalPapers> journalPaperses,
			JournalPapers journalPapers,
			Set<PublicationKeywords> publicationKeywordses) {
		this.id = id;
		this.abstract_ = abstract_;
		this.title = title;
		this.dblpKey = dblpKey;
		this.year = year;
		this.url = url;
		this.ee = ee;
		this.note = note;
		this.crossref = crossref;
		this.mdate = mdate;
		this.updatedState = updatedState;
		this.docType = docType;
		this.regDate = regDate;
		//this.bookChapterses = bookChapterses;
		this.bookChapters = bookChapters;
		//this.journalEditorialses = journalEditorialses;
		this.journalEditorials = journalEditorials;		
		//this.conferenceEditorialses = conferenceEditorialses;
		this.conferenceEditorials = conferenceEditorials;
		this.authorPublicationses = authorPublicationses;
		//this.conferencePaperses = conferencePaperses;
		this.conferencePapers = conferencePapers;
		//this.bookses = bookses;
		this.books = books;
		//this.journalPaperses = journalPaperses;
		this.journalPapers = journalPapers;
		this.publicationKeywordses = publicationKeywordses;
	}

	
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getAbstract_() {
		return this.abstract_;
	}
	
	public void setAbstract_(String abstract_) {
		this.abstract_ = abstract_;
	}

	@Column(name = "title")
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "dblp_key", length = 100)
	public String getDblpKey() {
		return this.dblpKey;
	}

	public void setDblpKey(String dblpKey) {
		this.dblpKey = dblpKey;
	}

	@Column(name = "year")
	public Integer getYear() {
		return this.year;
	}

	public void setYear(Integer year) {
		this.year = year;
	}

	@Column(name = "url")
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Column(name = "ee")
	public String getEe() {
		return this.ee;
	}

	public void setEe(String ee) {
		this.ee = ee;
	}

	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Column(name = "crossref")
	public String getCrossref() {
		return this.crossref;
	}

	public void setCrossref(String crossref) {
		this.crossref = crossref;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "mdate", length = 13)
	public Date getMdate() {
		return this.mdate;
	}

	public void setMdate(Date mdate) {
		this.mdate = mdate;
	}

	@Column(name = "updated_state", length = 80)
	public String getUpdatedState() {
		return this.updatedState;
	}

	public void setUpdatedState(String updatedState) {
		this.updatedState = updatedState;
	}

	@Column(name = "doc_type", length = 80)
	public String getDocType() {
		return this.docType;
	}

	public void setDocType(String docType) {
		this.docType = docType;
	}

	public Date getRegDate() {
		return this.regDate;
	}

	public void setRegDate(Date regDate) {
		this.regDate = regDate;
	}
	
	public String getRgInfo() {
		return this.rgInfo;
	}

	public void setRgInfo(String rgInfo) {
		this.rgInfo = rgInfo;
	}

	public String getProceedingInfo() {
		return this.proceedingInfo;
	}

	public void setProceedingInfo(String proceedingInfo) {
		this.proceedingInfo = proceedingInfo;
	}

	public BookChapters getBookChapters() {
		return this.bookChapters;
	}

	public void setBookChapters(BookChapters bookChapters) {
		this.bookChapters = bookChapters;
	}
	
	public JournalEditorials getJournalEditorials() {
		return this.journalEditorials;
	}

	public void setJournalEditorials(JournalEditorials journalEditorials) {
		this.journalEditorials = journalEditorials;
	}
	
	public ConferenceEditorials getConferenceEditorials() {
		return this.conferenceEditorials;
	}

	public void setConferenceEditorials(ConferenceEditorials conferenceEditorials) {
		this.conferenceEditorials = conferenceEditorials;
	}
	
	public ConferencePapers getConferencePapers() {
		return conferencePapers;
	}

	public void setConferencePapers(ConferencePapers conferencePapers) {
		this.conferencePapers = conferencePapers;
	}
	
	public Books getBooks() {
		return this.books;
	}

	public void setBooks(Books books) {
		this.books = books;
	}
	public JournalPapers getJournalPapers() {
		return this.journalPapers;
	}

	public void setJournalPapers(JournalPapers journalPapers) {
		this.journalPapers = journalPapers;
	}
	//@JsonManagedReference
	@JsonIgnore
	public Set<AuthorPublications> getAuthorPublicationses() {
		return this.authorPublicationses;
	}

	public void setAuthorPublicationses(Set<AuthorPublications> authorPublicationses) {
		this.authorPublicationses = authorPublicationses;
	}

	@JsonIgnore
	public Set<PublicationKeywords> getPublicationKeywordses() {
		return this.publicationKeywordses;
	}

	public void setPublicationKeywordses(Set<PublicationKeywords> publicationKeywordses) {
		this.publicationKeywordses = publicationKeywordses;
	}

	public int getApiState() {
		return apiState;
	}

	public void setApiState(int apiState) {
		this.apiState = apiState;
	}
	
	

	//funcion que extrae DOI de una publicacion
	public String extractDOI(){
		String doi = getEe();
		String res = "";
		if(doi.contains("doi.org/") ) {
			res = doi.substring(0,doi.indexOf("doi.org/"));
			res = doi.replace(res+"doi.org/", "").trim();
		}
		 return res;
	}
	
	public boolean hasDoi() {
		return getEe().contains("doi.org/");
	}
	
	
	@Override
	public String toString() {

	    return String.valueOf(getId());
	}
}
